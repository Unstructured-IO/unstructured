[project]
name = "unstructured"
version = "0.1.0"
requires-python = ">=3.12"
dependencies = [
    "annotated-types",
    "anyio",
    "backoff",
    "beautifulsoup4",
    "cffi",
    "chardet",
    "click",
    "cryptography",
    "dataclasses-json",
    "deepdiff",
    "emoji",
    "et-xmlfile",
    "filelock",
    "filetype",
    "fsspec",
    "google-cloud-vision>=3.10.1",
    "h11",
    "html5lib",
    "httpcore",
    "httpx",
    "huggingface-hub",
    "importlib-metadata",
    "jinja2",
    "joblib",
    "jsonpath-python",
    "langdetect",
    "lxml",
    "markdown",
    "markupsafe",
    "marshmallow",
    "mpmath",
    "nest-asyncio",
    "networkx",
    "nltk",
    "numpy",
    "olefile",
    "openpyxl",
    "orderly-set",
    "packaging",
    "paddlepaddle>=3.0.0",
    "pandas",
    "pandoc>=2.4",
    "pdf2image>=1.17.0",
    "pdfminer>=20191125",
    "pi-heif>=0.22.0",
    "pikepdf>=9.7.0",
    "pillow",
    "psutil",
    "pydantic",
    "pydantic-core",
    "pypandoc>=1.15",
    "pypdf",
    "python-dateutil",
    "python-docx",
    "python-iso639",
    "python-magic",
    "python-oxmsg",
    "python-pptx",
    "pytz",
    "pyyaml",
    "rapidfuzz",
    "regex",
    "requests",
    "requests-toolbelt",
    "s3fs",
    "sacremoses",
    "safetensors",
    "sentencepiece",
    "sniffio",
    "soupsieve",
    "sympy",
    "tesseract>=0.1.3",
    "tokenizers",
    "torch",
    "tqdm",
    "transformers",
    "typing-inspect",
    "tzdata",
    "unstructured-client",
    "unstructured-inference>=0.8.10",
    "unstructured-ingest[airtable,astradb,azure,azure-cognitive-search,bedrock,biomed,box,chroma,clarifai,confluence,couchbase,databricks-volumes,delta-table,discord,dropbox,elasticsearch,embed-huggingface,embed-octoai,embed-vertexai,embed-voyageai,gcs,github,gitlab,google-drive,hubspot,jira,kafka,kdbai,milvus,mongodb,notion,onedrive,openai,opensearch,outlook,pinecone,postgres,qdrant,reddit,remote,s3,salesforce,sftp,sharepoint,singlestore,slack,vectara,weaviate,wikipedia]>=0.2.1",
    "unstructured-paddleocr>=2.10.0",
    "unstructured-pytesseract>=0.3.15",
    "webencodings",
    "xlrd",
    "xlsxwriter",
]

[dependency-groups]
dev = [
    "hadolintw",
    "liccheck",
    "mypy",
    "pre-commit",
    "ruff",
    "semantic-version",
    "yamllint"
]
test = [
    "pytest",
    "pytest-mock",
    "pytest-coverage",
    "pytest-dependency",
    "pytest-asyncio",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build]
include = [
    "unstructured/**",
    "pyproject.toml"
]

[tool.coverage.run]
omit = [
    "unstructured/__version__.py",
    "unstructured/ingest/*",
    "unstructured/partition/utils/ocr_models/paddle_ocr.py"
]

[tool.coverage.report]
fail_under = 90

[tool.ruff]
line-length = 100
exclude= [
    ".venv",
    "venv"
]

[tool.ruff.lint]
select = [
    "C4",       # -- flake8-comprehensions --
    "COM",      # -- flake8-commas --
    "E",        # -- pycodestyle errors --
    "F",        # -- pyflakes --
    "I",        # -- isort (imports) --
    "PLR0402",  # -- Name compared with itself like `foo == foo` --
    "PT",       # -- flake8-pytest-style --
    "SIM",      # -- flake8-simplify --
    "UP015",    # -- redundant `open()` mode parameter (like "r" is default) --
    "UP018",    # -- Unnecessary {literal_type} call like `str("abc")`. (rewrite as a literal) --
    "UP032",    # -- Use f-string instead of `.format()` call --
    "UP034",    # -- Avoid extraneous parentheses --
]
ignore = [
    "COM812",   # -- over aggressively insists on trailing commas where not desireable --
    "PT001",
    "PT011",    # -- pytest.raises({exc}) too broad, use match param or more specific exception --
    "PT012",    # -- pytest.raises() block should contain a single simple statement --
    "PT023",
    "SIM108",   # -- ignore encouring use of ternary operator --
    "SIM117",   # -- merge `with` statements for context managers that have same scope --
]
