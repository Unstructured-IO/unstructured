
name: 'Ingest Cache Build'
description: 'Restore ingest specific cache on top of base cache, recreate if not found'
inputs:
  python-version:
    description: 'python version associated with the cache'
    required: true
  check-only:
    description: 'if set, will not restore the cache if it exists'
    default: "false"
runs:
  using: "composite"
  steps:
    - name: Check for/restore ingest cache
      uses: actions/cache/restore@v4
      id: ingest-virtualenv-cache-restore
      with:
        path: |
          .venv
          nltk_data
        key: unstructured-ingest-${{ runner.os }}-${{ inputs.python-version }}-${{ hashFiles('requirements/ingest/*.txt', 'requirements/*.txt') }}
        lookup-only: ${{ inputs.check-only }}
    - name: Set up Python ${{ inputs.python-version }}
      if: steps.ingest-virtualenv-cache-restore.outputs.cache-hit != 'true'
      uses: actions/setup-python@v5
      with:
        python-version: ${{ inputs.python-version }}
    - name: Setup virtual environment (no cache hit)
      if: steps.ingest-virtualenv-cache-restore.outputs.cache-hit != 'true'
      shell: bash
      run: |
        python${{ inputs.python-version }} -m pip install --upgrade virtualenv
        if [ ! -d ".venv" ]; then
          python${{ inputs.python-version }} -m venv .venv
        fi
        source .venv/bin/activate
        if [ "${{ inputs.python-version == '3.12' }}" == "true" ]; then
          python -m ensurepip --upgrade
          python -m pip install --upgrade setuptools
        fi
        make install-ci
        make install-nltk-models
        make install-all-docs
        make install-ingest
    - name: Save Ingest Cache
      if: steps.ingest-virtualenv-cache-restore.outputs.cache-hit != 'true'
      id: ingest-virtualenv-cache-save
      uses: actions/cache/save@v4
      with:
        path: |
          .venv
          nltk_data
        key: unstructured-ingest-${{ runner.os }}-${{ inputs.python-version }}-${{ hashFiles('requirements/ingest/*.txt', 'requirements/*.txt') }}

