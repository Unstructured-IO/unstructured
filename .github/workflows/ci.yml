name: CI

on:
  # NOTE(robinson) - We are limiting when we run CI avoid exceeding our 2,000 min/month limit.
  # We can switch to running on push if we make this repo public or are fine with
  # paying for CI minutes.
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]


jobs:
  setup:
    strategy:
      matrix:
        python-version: ["3.8","3.9","3.10"]
    runs-on: ubuntu-latest
    env:
      NLTK_DATA: ${{ github.workspace }}/nltk_data
    steps:
    - uses: actions/checkout@v3
    - uses: actions/cache@v3
      id: virtualenv-cache
      with:
        path: |
          .venv
          nltk_data
        key: unstructured-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('requirements/*.txt') }}
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Setup virtual environment (no cache hit)
      if: steps.virtualenv-cache.outputs.cache-hit != 'true'
      run: |
        python${{ matrix.python-version }} -m venv .venv
        source .venv/bin/activate
        make install-ci

  lint:
    strategy:
      matrix:
        python-version: ["3.8","3.9","3.10"]
    runs-on: ubuntu-latest
    needs: setup
    steps:
    - uses: actions/checkout@v3
    - uses: actions/cache@v3
      id: virtualenv-cache
      with:
        path: .venv
        key: unstructured-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('requirements/*.txt') }}
    # NOTE(robinson) - This is a fallback in case the lint job does not find the cache.
    # We can take this out when we implement the fix in CORE-99
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Setup virtual environment (no cache hit)
      if: steps.virtualenv-cache.outputs.cache-hit != 'true'
      run: |
        python${{ matrix.python-version }} -m venv .venv
        source .venv/bin/activate
        make install-ci
    - name: Lint
      run: |
        source .venv/bin/activate
        make check

  shellcheck:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: ShellCheck
        uses: ludeeus/action-shellcheck@master

  test_unit:
    strategy:
      matrix:
        python-version: ["3.8","3.9","3.10"]
    runs-on: ubuntu-latest
    env:
      NLTK_DATA: ${{ github.workspace }}/nltk_data
    needs: [setup, lint]
    steps:
    - uses: actions/checkout@v3
    - uses: actions/cache@v3
      id: virtualenv-cache
      with:
        path: |
          .venv
          nltk_data
        key: unstructured-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('requirements/*.txt') }}
    # NOTE(robinson) - This is a fallback in case the job does not find the cache.
    # We can take this out when we implement the fix in CORE-99
    - name: Setup virtual environment (no cache hit)
      if: steps.virtualenv-cache.outputs.cache-hit != 'true'
      run: |
        python${{ matrix.python-version}} -m venv .venv
        source .venv/bin/activate
        make install-ci
    - name: Test
      run: |
        source .venv/bin/activate
        make install-detectron2
        sudo apt-get update
        sudo apt-get install -y libmagic-dev poppler-utils libreoffice pandoc
        sudo add-apt-repository -y ppa:alex-p/tesseract-ocr5
        sudo apt-get install -y tesseract-ocr
        tesseract --version
        make test
        make check-coverage

  test_ingest:
    strategy:
      matrix:
        python-version: ["3.8","3.9","3.10"]
    runs-on: ubuntu-latest
    env:
      NLTK_DATA: ${{ github.workspace }}/nltk_data
    needs: [setup, lint]
    steps:
    - uses: actions/checkout@v3
    - uses: actions/cache@v3
      id: virtualenv-cache
      with:
        path: |
          .venv
          nltk_data
        key: unstructured-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('requirements/*.txt') }}
    # NOTE(robinson) - This is a fallback in case the lint job does not find the cache.
    # We can take this out when we implement the fix in CORE-99
    - name: Setup virtual environment (no cache hit)
      if: steps.virtualenv-cache.outputs.cache-hit != 'true'
      run: |
        python${{ matrix.python-version}} -m venv .venv
        source .venv/bin/activate
        make install-ci
    - name: Test
      env:
        GH_READ_ONLY_ACCESS_TOKEN: ${{ secrets.GH_READ_ONLY_ACCESS_TOKEN }}
        SLACK_TOKEN: ${{ secrets.SLACK_TOKEN }}
      run: |
        source .venv/bin/activate
        make install-detectron2
        sudo apt-get update
        sudo apt-get install -y libmagic-dev poppler-utils libreoffice pandoc
        sudo add-apt-repository -y ppa:alex-p/tesseract-ocr5
        sudo apt-get install -y tesseract-ocr
        tesseract --version
        make install-ingest-s3
        make install-ingest-azure
        make install-ingest-github
        make install-ingest-gitlab
        make install-ingest-slack
        make install-ingest-wikipedia
        ./test_unstructured_ingest/test-ingest.sh

  changelog:
    runs-on: ubuntu-latest
    steps:
    - if: github.ref != 'refs/heads/main'
      uses: dorny/paths-filter@v2
      id: changes
      with:
        filters: |
          src:
            - 'unstructured/**'

    - if: steps.changes.outputs.src == 'true' && github.ref != 'refs/heads/main'
      uses: dangoslen/changelog-enforcer@v3

  # TODO - figure out best practice for caching docker images
  # (Using the virtualenv to get pytest)
  test_dockerfile:
    runs-on: ubuntu-latest
    needs: [ setup, lint ]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        id: virtualenv-cache
        with:
          path: |
            .venv
            nltk_data
          key: unstructured-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('requirements/*.txt') }}
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Setup virtual environment (no cache hit)
        if: steps.virtualenv-cache.outputs.cache-hit != 'true'
        run: |
          python${{ matrix.python-version }} -m venv .venv
      - name: Test Dockerfile
        run: |
          source .venv/bin/activate
          make docker-build
          make docker-test

