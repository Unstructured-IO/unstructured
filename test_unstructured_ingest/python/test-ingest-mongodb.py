#!/usr/bin/env python
import time

import click
from pymongo.mongo_client import MongoClient
from pymongo.operations import SearchIndexModel

exact_embedding = [
    -0.05623878538608551,
    0.008579030632972717,
    0.03698136284947395,
    -0.01745658740401268,
    -0.030465232208371162,
    0.00996527448296547,
    -0.06086179241538048,
    -0.05874798074364662,
    0.004064749926328659,
    0.055232517421245575,
    -0.03895082697272301,
    0.0593162402510643,
    -0.0010321158915758133,
    -0.011440093629062176,
    -0.010708874091506004,
    0.04313306510448456,
    -0.031241590157151222,
    -0.051779624074697495,
    0.026878535747528076,
    -0.05345654860138893,
    0.05606776103377342,
    0.01336754485964775,
    -0.0378943495452404,
    0.05885220319032669,
    -0.04312293976545334,
    0.0009463775786571205,
    0.04333823174238205,
    -0.07970989495515823,
    -0.013353617861866951,
    0.09075909107923508,
    -0.0032708283979445696,
    0.001899553812108934,
    -0.14328448474407196,
    -0.000851310498546809,
    -0.04888870567083359,
    0.00420002406463027,
    0.03970788046717644,
    0.00044412488932721317,
    0.06517714262008667,
    -0.007000679615885019,
    -0.033883657306432724,
    -0.14054881036281586,
    -0.0076941694132983685,
    0.08999307453632355,
    0.08918149769306183,
    -0.009016236290335655,
    -0.03589746728539467,
    -0.006713262293487787,
    -0.05423480272293091,
    0.03945590555667877,
    -0.059206124395132065,
    -0.04266943782567978,
    0.03712105005979538,
    -0.0918966755270958,
    -0.0019204344134777784,
    -0.04314778745174408,
    0.03402673825621605,
    -0.06823819130659103,
    0.015292679890990257,
    0.00760680204257369,
    0.036272842437028885,
    -0.060919784009456635,
    -0.02864403836429119,
    0.04057972505688667,
    0.025551222264766693,
    0.0018394337967038155,
    0.09342426061630249,
    -0.03980196639895439,
    -0.028092319145798683,
    -0.023752491921186447,
    -0.05157668888568878,
    -0.06141505390405655,
    0.09785791486501694,
    -0.043346915394067764,
    0.01225394755601883,
    0.028768986463546753,
    0.02732323855161667,
    0.0790775865316391,
    0.007500651758164167,
    -0.05714528635144234,
    -0.0341203399002552,
    -0.01593893952667713,
    -0.008237107656896114,
    0.018415629863739014,
    -0.07733991742134094,
    0.016130739822983742,
    -0.030988765880465508,
    0.0899844765663147,
    0.0418621189892292,
    -0.017017684876918793,
    -0.0011373944580554962,
    0.019584201276302338,
    -0.058429598808288574,
    0.0731840580701828,
    -0.12337666004896164,
    0.02418939583003521,
    -0.043793581426143646,
    -0.07092457264661789,
    0.05747729167342186,
    0.06319963186979294,
    0.04655645415186882,
    0.08276747167110443,
    -0.03392134979367256,
    -0.04022648185491562,
    -0.01208505965769291,
    -0.010870243422687054,
    -0.006495106499642134,
    -0.0625496655702591,
    -0.030377499759197235,
    -0.08734524995088577,
    -0.03189956024289131,
    -0.058945223689079285,
    0.002212589606642723,
    0.012459215708076954,
    -0.006888183299452066,
    0.03598955646157265,
    0.06303267180919647,
    -0.02336401306092739,
    0.0631665289402008,
    -0.05934441462159157,
    0.015532196499407291,
    0.051175374537706375,
    0.0032199150882661343,
    -0.0012891492806375027,
    -0.054061226546764374,
    0.03392966091632843,
    -0.017349818721413612,
    -1.8472170059462523e-33,
    -0.023121971637010574,
    -0.10828257352113724,
    -0.01561657153069973,
    0.07176513969898224,
    -0.08808579295873642,
    0.01976778358221054,
    0.08643898367881775,
    -0.031373076140880585,
    0.04437714070081711,
    -0.05468776822090149,
    0.0029568697791546583,
    -0.10388535261154175,
    -0.027037635445594788,
    -0.0439264141023159,
    -0.04442125931382179,
    -0.08843390643596649,
    -0.007675725035369396,
    -0.014111041091382504,
    0.02644958347082138,
    -0.01815008744597435,
    0.05338772013783455,
    -0.08516474813222885,
    -0.04120764136314392,
    0.021678684279322624,
    0.026605969294905663,
    0.030139243230223656,
    0.006804190576076508,
    -0.054840248078107834,
    0.03755558654665947,
    0.059846799820661545,
    0.09057307243347168,
    0.003441040636971593,
    0.0262826606631279,
    -0.03596774861216545,
    -0.003326467936858535,
    0.0509929396212101,
    -0.06388266384601593,
    0.00822592992335558,
    -0.026109997183084488,
    0.021934429183602333,
    0.10928112268447876,
    -0.004757826682180166,
    0.011364826932549477,
    -0.062228281050920486,
    0.07574109733104706,
    -0.04634057730436325,
    0.05469582602381706,
    0.06863687187433243,
    0.011524147354066372,
    -0.07103749364614487,
    -0.06123644486069679,
    -0.000972036155872047,
    -0.04179763048887253,
    0.0037396864499896765,
    0.021849697455763817,
    -0.025750109925866127,
    -0.03229863941669464,
    -0.07120274007320404,
    -0.022471049800515175,
    -0.08038699626922607,
    0.02046153135597706,
    0.03847002983093262,
    -0.03167593851685524,
    -0.0050210352055728436,
    -0.07562457025051117,
    -0.005910709500312805,
    0.0843304917216301,
    0.026178112253546715,
    0.005017758347094059,
    0.004698204807937145,
    0.07100685685873032,
    0.03145027533173561,
    -0.027158692479133606,
    -0.07866737991571426,
    -0.03602047637104988,
    0.016305670142173767,
    0.11045505106449127,
    -0.022760218009352684,
    0.04051121696829796,
    0.10929171741008759,
    -0.049685269594192505,
    0.0445556640625,
    0.08279704302549362,
    0.04527441784739494,
    0.023037999868392944,
    0.03742208704352379,
    0.02183458022773266,
    0.009157601743936539,
    0.03599969297647476,
    -0.08533079922199249,
    0.024778010323643684,
    -0.019068069756031036,
    0.08631537854671478,
    0.0829576924443245,
    -0.08174905925989151,
    -8.325756490515558e-34,
    0.007742923218756914,
    0.08995752036571503,
    0.03566252812743187,
    0.0159420445561409,
    -0.01876039057970047,
    -0.07581651955842972,
    -0.008195053786039352,
    0.15072862803936005,
    0.030947871506214142,
    -0.008944335393607616,
    0.008879273198544979,
    0.007993767037987709,
    0.06887131184339523,
    0.07486876845359802,
    0.016168026253581047,
    0.008131774142384529,
    0.029511548578739166,
    -0.03427732735872269,
    -0.07710686326026917,
    0.009771155193448067,
    -0.04689846560359001,
    -0.019206484779715538,
    -0.0177118219435215,
    0.020643342286348343,
    0.0245656818151474,
    0.03541659191250801,
    0.09595362842082977,
    -0.02653338760137558,
    0.008366184309124947,
    -0.025736862793564796,
    -0.07147716730833054,
    -0.07232016324996948,
    -0.00966151524335146,
    0.010007047094404697,
    0.051975902169942856,
    -0.022875910624861717,
    0.05864810198545456,
    0.023420287296175957,
    -0.02047838643193245,
    0.03107760101556778,
    -0.013746573589742184,
    0.0895368680357933,
    -0.06116849556565285,
    0.020649226382374763,
    -0.0181159395724535,
    0.0033288621343672276,
    0.026790892705321312,
    0.0676577016711235,
    0.0869971290230751,
    -0.01680656336247921,
    -0.025549640879034996,
    -0.004513309802860022,
    0.034085433930158615,
    0.0021930052898824215,
    0.05589760094881058,
    0.0261259526014328,
    0.044228695333004,
    0.051239851862192154,
    0.021359434351325035,
    0.021059386432170868,
    -0.06444566696882248,
    0.005110847298055887,
    0.05024029314517975,
    -0.04262261465191841,
    -0.011679507791996002,
    -0.0691569522023201,
    -0.038860172033309937,
    0.07711496949195862,
    0.03622151538729668,
    0.08164253830909729,
    0.08260788023471832,
    -0.00592036871239543,
    -0.12160384654998779,
    -0.03548727557063103,
    -0.04532632231712341,
    -0.023950934410095215,
    0.06674450635910034,
    0.0037619953509420156,
    0.007678889203816652,
    0.020529022440314293,
    0.012944284826517105,
    0.04111237823963165,
    -0.06377465277910233,
    0.02485901676118374,
    -0.0580415204167366,
    -0.03702633082866669,
    0.006637125741690397,
    0.01986946165561676,
    -0.028163278475403786,
    -0.0732584074139595,
    -0.06311823427677155,
    0.06016797572374344,
    -0.03969581425189972,
    -0.017630066722631454,
    0.020758390426635742,
    -1.7204369484602466e-08,
    0.10727972537279129,
    0.042685557156801224,
    -0.07422070950269699,
    0.005147645249962807,
    0.0014729785034433007,
    0.02943696826696396,
    -0.020493056625127792,
    -0.018170345574617386,
    0.08125167340040207,
    0.00872801337391138,
    0.10786811262369156,
    -0.024583838880062103,
    0.06570357829332352,
    0.008156754076480865,
    0.0367196686565876,
    0.08374989777803421,
    -0.09542890638113022,
    -0.0762573853135109,
    0.010566466487944126,
    -0.06656435132026672,
    -0.029461100697517395,
    -0.08534424751996994,
    0.07921914756298065,
    -0.013343843631446362,
    0.010622018948197365,
    -0.015351439826190472,
    -0.059602633118629456,
    0.03815896809101105,
    -0.09532225877046585,
    0.00811628345400095,
    -0.059593457728624344,
    0.024368226528167725,
    -0.09412311017513275,
    -0.07279683649539948,
    -0.045638155192136765,
    0.08239519596099854,
    -0.03481832891702652,
    -0.0057164141908288,
    -0.0085479486733675,
    0.025259681046009064,
    0.02258855476975441,
    0.06845124065876007,
    0.007949150167405605,
    0.07085368037223816,
    0.038118500262498856,
    -0.16168253123760223,
    0.06055174022912979,
    -0.01887800358235836,
    -0.06271593272686005,
    -0.029577750712633133,
    -0.1147131398320198,
    -0.012810613960027695,
    0.037802401930093765,
    -0.03333716094493866,
    0.08424387872219086,
    0.035400327295064926,
    -0.009253102354705334,
    -0.044454243034124374,
    -0.03718222677707672,
    0.04175087809562683,
    0.03846074268221855,
    -0.037297572940588,
    -0.00917679350823164,
    0.008958225138485432,
]


def get_client(uri: str) -> MongoClient:
    client = MongoClient(uri)
    client.admin.command("ping")
    print("Successfully connected to MongoDB")
    return client


@click.group(name="mongo-ingest")
@click.option("--uri", type=str, required=True)
@click.option("--database", type=str, required=True)
@click.option("--collection", type=str, required=True)
@click.pass_context
def cli(ctx, uri: str, database: str, collection: str):
    pass


@cli.command()
@click.pass_context
def up(ctx):
    client = get_client(ctx.parent.params["uri"])
    collection_name = ctx.parent.params["collection"]
    db = client[ctx.parent.params["database"]]
    print(f"creating collection {collection_name}")
    collection = db.create_collection(name=collection_name)
    print(f"successfully created collection: {collection_name}")
    if "embeddings" in [c["name"] for c in collection.list_search_indexes()]:
        print("search index already exists, skipping creation")
        return

    search_index_name = collection.create_search_index(
        model=SearchIndexModel(
            name="embeddings",
            definition={
                "mappings": {
                    "dynamic": True,
                    "fields": {
                        "embeddings": [
                            {"type": "knnVector", "dimensions": 384, "similarity": "euclidean"}
                        ]
                    },
                }
            },
        )
    )
    print(f"Added search index: {search_index_name}")


@cli.command()
@click.pass_context
def down(ctx):
    collection_name = ctx.parent.params["collection"]
    client = get_client(ctx.parent.params["uri"])
    db = client[ctx.parent.params["database"]]
    if collection_name not in db.list_collection_names():
        print(
            "collection name {} does not exist amongst those in database: {}, "
            "skipping deletion".format(collection_name, ", ".join(db.list_collection_names()))
        )
        return
    print(f"deleting collection: {collection_name}")
    collection = db[collection_name]
    collection.drop()
    print(f"successfully deleted collection: {collection}")


@cli.command()
@click.option("--expected-records", type=int, required=True)
@click.pass_context
def check(ctx, expected_records: int):
    client = get_client(ctx.parent.params["uri"])
    db = client[ctx.parent.params["database"]]
    collection = db[ctx.parent.params["collection"]]
    count = collection.count_documents(filter={})
    print(f"checking the count in the db ({count}) matches what's expected: {expected_records}")
    assert (
        count == expected_records
    ), f"expected count ({expected_records}) does not match how many records were found: {count}"
    print("successfully checked that the expected number of records was found in the db!")


@cli.command()
@click.pass_context
def check_vector(ctx):
    """
    Checks the functionality of the vector search index by getting a score based on the
    exact result of one of the embeddings. Makes sure that the search index itself has finished
    indexing before running a query, then validated that the first item in the returned sorted
    list has a score of 1.0 given that the exact embedding is used as a match, and all others
    have a score less than 1.0.
    """
    client = get_client(ctx.parent.params["uri"])
    db = client[ctx.parent.params["database"]]
    collection = db[ctx.parent.params["collection"]]
    vector_index_name = "embeddings"
    status = [ind for ind in collection.list_search_indexes() if ind["name"] == vector_index_name][
        0
    ].get("status")
    max_attempts = 30
    attempts = 0
    wait_seconds = 5
    while status != "READY" and attempts < max_attempts:
        print(
            f"status of search index: {status}, waiting another {wait_seconds} "
            f"seconds for it to be ready"
        )
        attempts += 1
        time.sleep(wait_seconds)
        status = [
            ind for ind in collection.list_search_indexes() if ind["name"] == vector_index_name
        ][0].get("status")
    print(f"search index is ready to go ({status}), checking vector content")
    pipeline = [
        {
            "$vectorSearch": {
                "index": "embeddings",
                "path": "embeddings",
                "queryVector": exact_embedding,
                "numCandidates": 150,
                "limit": 10,
            },
        },
        {"$project": {"_id": 0, "text": 1, "score": {"$meta": "vectorSearchScore"}}},
    ]
    result = list(collection.aggregate(pipeline=pipeline))
    assert result[0]["score"] == 1.0, "score detected should be 1: {}".format(result[0]["score"])
    for r in result[1:]:
        assert r["score"] < 1.0, "score detected should be less than 1: {}".format(r["score"])
    print("successfully validated vector content!")


if __name__ == "__main__":
    cli()
