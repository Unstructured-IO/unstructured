[
  {
    "element_id": "601d7c263c383c65bfd88cd9978d1d14",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 1
    },
    "text": "1 2 0 2",
    "type": "UncategorizedText"
  },
  {
    "element_id": "b80fee66885c9bd454037fa79eceab9b",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 1
    },
    "text": "n u J 1 2 ] V C . s c [",
    "type": "Header"
  },
  {
    "element_id": "9a25a99c2a0aa9c7f190f530ac4077af",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 1
    },
    "text": "2 v 8 4 3 5 1 . 3 0 1 2 : v i X r a",
    "type": "UncategorizedText"
  },
  {
    "element_id": "6425f039eab60ea6b897deaa8da1d5a4",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 1
    },
    "text": "LayoutParser: A Uniﬁed Toolkit for Deep Learning Based Document Image Analysis",
    "type": "Title"
  },
  {
    "element_id": "da019ca8fee48b4948deb04f53966605",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 1
    },
    "text": "Zejiang Shen! (4), Ruochen Zhang”, Melissa Dell?, Benjamin Charles Germain Lee*, Jacob Carlson’, and Weining Li>",
    "type": "NarrativeText"
  },
  {
    "element_id": "1af2e2d20c75e681c7b15b5e739eb348",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 1
    },
    "text": "1 Allen Institute for AI shannons@allenai.org 2 Brown University ruochen zhang@brown.edu 3 Harvard University {melissadell,jacob carlson}@fas.harvard.edu 4 University of Washington bcgl@cs.washington.edu 5 University of Waterloo w422li@uwaterloo.ca",
    "type": "NarrativeText"
  },
  {
    "element_id": "8f044c6a90c8e195984777ff50e40e0e",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 1
    },
    "text": "Abstract. Recent advances in document image analysis (DIA) have been primarily driven by the application of neural networks. Ideally, research outcomes could be easily deployed in production and extended for further investigation. However, various factors like loosely organized codebases and sophisticated model conﬁgurations complicate the easy reuse of im- portant innovations by a wide audience. Though there have been on-going eﬀorts to improve reusability and simplify deep learning (DL) model development in disciplines like natural language processing and computer vision, none of them are optimized for challenges in the domain of DIA. This represents a major gap in the existing toolkit, as DIA is central to academic research across a wide range of disciplines in the social sciences and humanities. This paper introduces LayoutParser, an open-source library for streamlining the usage of DL in DIA research and applica- tions. The core LayoutParser library comes with a set of simple and intuitive interfaces for applying and customizing DL models for layout de- tection, character recognition, and many other document processing tasks. To promote extensibility, LayoutParser also incorporates a community platform for sharing both pre-trained models and full document digiti- zation pipelines. We demonstrate that LayoutParser is helpful for both lightweight and large-scale digitization pipelines in real-word use cases. The library is publicly available at https://layout-parser.github.io.",
    "type": "NarrativeText"
  },
  {
    "element_id": "327a41b21755475f715a7344982eb16f",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 1
    },
    "text": "Keywords: Document Image Analysis · Deep Learning · Layout Analysis · Character Recognition · Open Source library · Toolkit.",
    "type": "NarrativeText"
  },
  {
    "element_id": "bd52b7c706848eea9c0161344baa123c",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 1
    },
    "text": "Introduction",
    "type": "Title"
  },
  {
    "element_id": "feb54ea21724b425bf4d4a5a1c223ac9",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 1
    },
    "text": "Deep Learning(DL)-based approaches are the state-of-the-art for a wide range of document image analysis (DIA) tasks including document image classiﬁcation [11,",
    "type": "NarrativeText"
  },
  {
    "element_id": "7a3357411b24905847766a141e03054b",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 2
    },
    "text": "2 Z. Shen et al.",
    "type": "Title"
  },
  {
    "element_id": "df4bba7732b8ea984981a500875d6a9b",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 2
    },
    "text": "37], layout detection [38, 22], table detection [26], and scene text detection [4]. A generalized learning-based framework dramatically reduces the need for the manual speciﬁcation of complicated rules, which is the status quo with traditional methods. DL has the potential to transform DIA pipelines and beneﬁt a broad spectrum of large-scale document digitization projects.",
    "type": "NarrativeText"
  },
  {
    "element_id": "4c073fc543b4ffabf174ae41de2d8f18",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 2
    },
    "text": "However, there are several practical diﬃculties for taking advantages of re- cent advances in DL-based methods: 1) DL models are notoriously convoluted for reuse and extension. Existing models are developed using distinct frame- works like TensorFlow [1] or PyTorch [24], and the high-level parameters can be obfuscated by implementation details [8]. It can be a time-consuming and frustrating experience to debug, reproduce, and adapt existing models for DIA, and many researchers who would beneﬁt the most from using these methods lack the technical background to implement them from scratch. 2) Document images contain diverse and disparate patterns across domains, and customized training is often required to achieve a desirable detection accuracy. Currently there is no full-ﬂedged infrastructure for easily curating the target document image datasets and ﬁne-tuning or re-training the models. 3) DIA usually requires a sequence of models and other processing to obtain the ﬁnal outputs. Often research teams use DL models and then perform further document analyses in separate processes, and these pipelines are not documented in any central location (and often not documented at all). This makes it diﬃcult for research teams to learn about how full pipelines are implemented and leads them to invest signiﬁcant resources in reinventing the DIA wheel.",
    "type": "NarrativeText"
  },
  {
    "element_id": "ec48c73de317654aaa9a18ab2fe59009",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 2
    },
    "text": "LayoutParser provides a uniﬁed toolkit to support DL-based document image analysis and processing. To address the aforementioned challenges, LayoutParser is built with the following components:",
    "type": "NarrativeText"
  },
  {
    "element_id": "c6added6fb03159da8e8542142e07fc5",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 2
    },
    "text": "1. An oﬀ-the-shelf toolkit for applying DL models for layout detection, character recognition, and other DIA tasks (Section 3)",
    "type": "ListItem"
  },
  {
    "element_id": "60d7ff8fbae4f4ee7393f50e4afb3de7",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 2
    },
    "text": "2. A rich repository of pre-trained neural network models (Model Zoo) that underlies the oﬀ-the-shelf usage",
    "type": "ListItem"
  },
  {
    "element_id": "a2ac0879d656f2b60d2db177a769a554",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 2
    },
    "text": "3. Comprehensive tools for eﬃcient document image data annotation and model tuning to support diﬀerent levels of customization",
    "type": "ListItem"
  },
  {
    "element_id": "608558842cd0d6c4cb6a84980259a81a",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 2
    },
    "text": "4. A DL model hub and community platform for the easy sharing, distribu- tion, and discussion of DIA models and pipelines, to promote reusability, reproducibility, and extensibility (Section 4)",
    "type": "ListItem"
  },
  {
    "element_id": "1327d4806c74863a8966b3b4db05b068",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 2
    },
    "text": "The library implements simple and intuitive Python APIs without sacriﬁcing generalizability and versatility, and can be easily installed via pip. Its convenient functions for handling document image data can be seamlessly integrated with existing DIA pipelines. With detailed documentations and carefully curated tutorials, we hope this tool will beneﬁt a variety of end-users, and will lead to advances in applications in both industry and academic research.",
    "type": "NarrativeText"
  },
  {
    "element_id": "deb18f1196d5ccd9c4c7df9ff58dd3ad",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 2
    },
    "text": "LayoutParser is well aligned with recent eﬀorts for improving DL model reusability in other disciplines like natural language processing [8, 34] and com- puter vision [35], but with a focus on unique challenges in DIA. We show LayoutParser can be applied in sophisticated and large-scale digitization projects",
    "type": "NarrativeText"
  },
  {
    "element_id": "4527e6163efe756d9f351c9dae5ed272",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 3
    },
    "text": "LayoutParser: A Uniﬁed Toolkit for DL-Based DIA",
    "type": "Header"
  },
  {
    "element_id": "6d9e1ad9a90873bf5bd9177a07e099a5",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 3
    },
    "text": "that require precision, eﬃciency, and robustness, as well as simple and light- weight document processing tasks focusing on eﬃcacy and ﬂexibility (Section 5). LayoutParser is being actively maintained, and support for more deep learning models and novel methods in text-based layout analysis methods [37, 34] is planned.",
    "type": "NarrativeText"
  },
  {
    "element_id": "9ae37f1a5636179f300b0e4b880d5939",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 3
    },
    "text": "The rest of the paper is organized as follows. Section 2 provides an overview of related work. The core LayoutParser library, DL Model Zoo, and customized model training are described in Section 3, and the DL model hub and commu- nity platform are detailed in Section 4. Section 5 shows two examples of how LayoutParser can be used in practical DIA projects, and Section 6 concludes.",
    "type": "NarrativeText"
  },
  {
    "element_id": "872b80a4d6a6ba9d303eba9b3975f018",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 3
    },
    "text": "2 Related Work",
    "type": "Title"
  },
  {
    "element_id": "2699fdc09607e4592213908758450af5",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 3
    },
    "text": "Recently, various DL models and datasets have been developed for layout analysis tasks. The dhSegment [22] utilizes fully convolutional networks [20] for segmen- tation tasks on historical documents. Object detection-based methods like Faster R-CNN [28] and Mask R-CNN [12] are used for identifying document elements [38] and detecting tables [30, 26]. Most recently, Graph Neural Networks [29] have also been used in table detection [27]. However, these models are usually implemented individually and there is no uniﬁed framework to load and use such models.",
    "type": "NarrativeText"
  },
  {
    "element_id": "36b181e119ec899a6c96b228cd0f692d",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 3
    },
    "text": "There has been a surge of interest in creating open-source tools for document image processing: a search of document image analysis in Github leads to 5M relevant code pieces 6; yet most of them rely on traditional rule-based methods or provide limited functionalities. The closest prior research to our work is the OCR-D project7, which also tries to build a complete toolkit for DIA. However, similar to the platform developed by Neudecker et al. [21], it is designed for analyzing historical documents, and provides no supports for recent DL models. The DocumentLayoutAnalysis project8 focuses on processing born-digital PDF documents via analyzing the stored PDF data. Repositories like DeepLayout9 and Detectron2-PubLayNet10 are individual deep learning models trained on layout analysis datasets without support for the full DIA pipeline. The Document Analysis and Exploitation (DAE) platform [15] and the DeepDIVA project [2] aim to improve the reproducibility of DIA methods (or DL models), yet they are not actively maintained. OCR engines like Tesseract [14], easyOCR11 and paddleOCR12 usually do not come with comprehensive functionalities for other DIA tasks like layout analysis.",
    "type": "NarrativeText"
  },
  {
    "element_id": "f2e6f8bb90d43d12cc4a02b442cc163c",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 3
    },
    "text": "Recent years have also seen numerous eﬀorts to create libraries for promoting reproducibility and reusability in the ﬁeld of DL. Libraries like Dectectron2 [35],",
    "type": "NarrativeText"
  },
  {
    "element_id": "5e9dbe2d798807e0966493d355e47cb4",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 3
    },
    "text": "6 The number shown is obtained by specifying the search type as ‘code’. 7 https://ocr-d.de/en/about 8 https://github.com/BobLd/DocumentLayoutAnalysis 9 https://github.com/leonlulu/DeepLayout 10 https://github.com/hpanwar08/detectron2 11 https://github.com/JaidedAI/EasyOCR 12 https://github.com/PaddlePaddle/PaddleOCR",
    "type": "NarrativeText"
  },
  {
    "element_id": "fee7e1048f980031c4f827d4bbf2c9b3",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 4
    },
    "text": "4",
    "type": "UncategorizedText"
  },
  {
    "element_id": "bacd0d926a1b3b4809180416dceaeb3e",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 4
    },
    "text": "Z. Shen et al.",
    "type": "NarrativeText"
  },
  {
    "element_id": "e727d5e729a83844e1201ed6faecff2f",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 4
    },
    "text": "Efficient Data Annotation Model Customization Document Images Community Platform ‘a >) ¥ DIA Model Hub i .) Customized Model Training] == | Layout Detection Models | ——= DIA Pipeline Sharing ~ OCR Module = { Layout Data stuctue ) = (storage Visualization VY",
    "type": "Image"
  },
  {
    "element_id": "be988477e6d7d83dbf7279492f9daa3f",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 4
    },
    "text": "Fig. 1: The overall architecture of LayoutParser. For an input document image, the core LayoutParser library provides a set of oﬀ-the-shelf tools for layout detection, OCR, visualization, and storage, backed by a carefully designed layout data structure. LayoutParser also supports high level customization via eﬃcient layout annotation and model training functions. These improve model accuracy on the target samples. The community platform enables the easy sharing of DIA models and whole digitization pipelines to promote reusability and reproducibility. A collection of detailed documentation, tutorials and exemplar projects make LayoutParser easy to learn and use.",
    "type": "NarrativeText"
  },
  {
    "element_id": "eb443d6aba1adf610c2ab604b33711bd",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 4
    },
    "text": "AllenNLP [8] and transformers [34] have provided the community with complete DL-based support for developing and deploying models for general computer vision and natural language processing problems. LayoutParser, on the other hand, specializes speciﬁcally in DIA tasks. LayoutParser is also equipped with a community platform inspired by established model hubs such as Torch Hub [23] and TensorFlow Hub [1]. It enables the sharing of pretrained models as well as full document processing pipelines that are unique to DIA tasks.",
    "type": "NarrativeText"
  },
  {
    "element_id": "db09c4ae9791d912299f714928be631b",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 4
    },
    "text": "There have been a variety of document data collections to facilitate the development of DL models. Some examples include PRImA [3](magazine layouts), PubLayNet [38](academic paper layouts), Table Bank [18](tables in academic papers), Newspaper Navigator Dataset [16, 17](newspaper ﬁgure layouts) and HJDataset [31](historical Japanese document layouts). A spectrum of models trained on these datasets are currently available in the LayoutParser model zoo to support diﬀerent use cases.",
    "type": "NarrativeText"
  },
  {
    "element_id": "a3f08391a08c6cf96d405b8af87ff8f2",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 4
    },
    "text": "3 The Core LayoutParser Library",
    "type": "Title"
  },
  {
    "element_id": "b54f5f0792845f945161690d3ca77621",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 4
    },
    "text": "At the core of LayoutParser is an oﬀ-the-shelf toolkit that streamlines DL- based document image analysis. Five components support a simple interface with comprehensive functionalities: 1) The layout detection models enable using pre-trained or self-trained DL models for layout detection with just four lines of code. 2) The detected layout information is stored in carefully engineered",
    "type": "NarrativeText"
  },
  {
    "element_id": "6b2a53430b690c322c02c5f1f3517a4f",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 5
    },
    "text": "LayoutParser: A Uniﬁed Toolkit for DL-Based DIA",
    "type": "ListItem"
  },
  {
    "element_id": "55aaeb8e5001440116c80e5dcbdbfd9f",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 5
    },
    "text": "Table 1: Current layout detection models in the LayoutParser model zoo",
    "type": "FigureCaption"
  },
  {
    "element_id": "a1337d560dfbaf4ddccb15df45a82071",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 5,
      "text_as_html": "<table><thead><th>Dataset</th><th>| Base Model'|</th><th>| Notes</th></thead><tr><td>PubLayNet B8]|</td><td>F/M</td><td>Layouts of modern scientific documents</td></tr><tr><td>PRImA</td><td>M</td><td>Layouts of scanned modern magazines and scientific report</td></tr><tr><td>Newspaper</td><td>F</td><td>Layouts of scanned US newspapers from the 20th century</td></tr><tr><td>TableBank</td><td>F</td><td>Table region on modern scientific and business document</td></tr><tr><td>HJDataset</td><td>F/M</td><td>Layouts of history Japanese documents</td></tr></table>"
    },
    "text": "Dataset Base Model1 Large Model Notes PubLayNet [38] PRImA [3] Newspaper [17] TableBank [18] HJDataset [31] F / M M F F F / M M - - F - Layouts of modern scientiﬁc documents Layouts of scanned modern magazines and scientiﬁc reports Layouts of scanned US newspapers from the 20th century Table region on modern scientiﬁc and business document Layouts of history Japanese documents",
    "type": "Table"
  },
  {
    "element_id": "7bc2ce324f9270f756e1ce7e31d22ed5",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 5
    },
    "text": "1 For each dataset, we train several models of diﬀerent sizes for diﬀerent needs (the trade-oﬀ between accuracy vs. computational cost). For “base model” and “large model”, we refer to using the ResNet 50 or ResNet 101 backbones [13], respectively. One can train models of diﬀerent architectures, like Faster R-CNN [28] (F) and Mask R-CNN [12] (M). For example, an F in the Large Model column indicates it has a Faster R-CNN model trained using the ResNet 101 backbone. The platform is maintained and a number of additions will be made to the model zoo in coming months.",
    "type": "FigureCaption"
  },
  {
    "element_id": "4e2629fdbad136e73872a5651e356965",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 5
    },
    "text": "layout data structures, which are optimized for eﬃciency and versatility. 3) When necessary, users can employ existing or customized OCR models via the uniﬁed API provided in the OCR module. 4) LayoutParser comes with a set of utility functions for the visualization and storage of the layout data. 5) LayoutParser is also highly customizable, via its integration with functions for layout data annotation and model training. We now provide detailed descriptions for each component.",
    "type": "NarrativeText"
  },
  {
    "element_id": "100fc8e7c215813e00b66201cf8cc1ab",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 5
    },
    "text": "3.1 Layout Detection Models",
    "type": "Title"
  },
  {
    "element_id": "6a1dc17cdf3c6f9806ff4ad63a653558",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 5
    },
    "text": "In LayoutParser, a layout model takes a document image as an input and generates a list of rectangular boxes for the target content regions. Diﬀerent from traditional methods, it relies on deep convolutional neural networks rather than manually curated rules to identify content regions. It is formulated as an object detection problem and state-of-the-art models like Faster R-CNN [28] and Mask R-CNN [12] are used. This yields prediction results of high accuracy and makes it possible to build a concise, generalized interface for layout detection. LayoutParser, built upon Detectron2 [35], provides a minimal API that can perform layout detection with only four lines of code in Python:",
    "type": "NarrativeText"
  },
  {
    "element_id": "d9d1fe99b273962abcfb2d2bb9a05adb",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 5
    },
    "text": "1 import layoutparser as lp 2 image = cv2 . imread ( \" image_file \" ) # load images 3 model = lp . De t e c tro n2 Lay outM odel ( \" lp :// PubLayNet / f as t er _ r c nn _ R _ 50 _ F P N_ 3 x / config \" ) 4 5 layout = model . detect ( image )",
    "type": "NarrativeText"
  },
  {
    "element_id": "47c78f9e8bc2fee05d9d29e419f156b4",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 5
    },
    "text": "LayoutParser provides a wealth of pre-trained model weights using various datasets covering diﬀerent languages, time periods, and document types. Due to domain shift [7], the prediction performance can notably drop when models are ap- plied to target samples that are signiﬁcantly diﬀerent from the training dataset. As document structures and layouts vary greatly in diﬀerent domains, it is important to select models trained on a dataset similar to the test samples. A semantic syntax is used for initializing the model weights in LayoutParser, using both the dataset name and model name lp://<dataset-name>/<model-architecture-name>.",
    "type": "NarrativeText"
  },
  {
    "element_id": "5e534a8354549cea9a90f8241746d38c",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 6
    },
    "text": "6",
    "type": "UncategorizedText"
  },
  {
    "element_id": "2621b3378459e7a40cd65d8379bc72c1",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 6
    },
    "text": "Z. Shen et al.",
    "type": "NarrativeText"
  },
  {
    "element_id": "b383e741d9fa8b458117d1f1dbf7d2ec",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 6
    },
    "text": "- ° . 3 a a 4 a 3 oo er ‘ 2 § 8 a 8 3 3 ‘ £ 4 A g a 9 ‘ 3 ¥ Coordinate g 4 5 3 + § 3 H Extra Features [O=\") [Bo] eaing i Text | | Type | | ower ° & a ¢ o [ coordinatel textblock1, 3 3 ’ g Q 3 , textblock2 , layoutl ] 4 q ® A list of the layout elements Ff",
    "type": "Image"
  },
  {
    "element_id": "1939b568c80aaf625ee92897ea6bf10d",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 6
    },
    "text": "Fig. 2: The relationship between the three types of layout data structures. Coordinate supports three kinds of variation; TextBlock consists of the co- ordinate information and extra features like block text, types, and reading orders; a Layout object is a list of all possible layout elements, including other Layout objects. They all support the same set of transformation and operation APIs for maximum ﬂexibility.",
    "type": "FigureCaption"
  },
  {
    "element_id": "a10b0debb997b33e2e5e04c0ba525419",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 6
    },
    "text": "Shown in Table 1, LayoutParser currently hosts 9 pre-trained models trained on 5 diﬀerent datasets. Description of the training dataset is provided alongside with the trained models such that users can quickly identify the most suitable models for their tasks. Additionally, when such a model is not readily available, LayoutParser also supports training customized layout models and community sharing of the models (detailed in Section 3.5).",
    "type": "NarrativeText"
  },
  {
    "element_id": "ec0e8b87dc8332ca243d55c02937b005",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 6
    },
    "text": "3.2 Layout Data Structures",
    "type": "Title"
  },
  {
    "element_id": "e57d81009f30283d894649fd528cf764",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 6
    },
    "text": "A critical feature of LayoutParser is the implementation of a series of data structures and operations that can be used to eﬃciently process and manipulate the layout elements. In document image analysis pipelines, various post-processing on the layout analysis model outputs is usually required to obtain the ﬁnal outputs. Traditionally, this requires exporting DL model outputs and then loading the results into other pipelines. All model outputs from LayoutParser will be stored in carefully engineered data types optimized for further processing, which makes it possible to build an end-to-end document digitization pipeline within LayoutParser. There are three key components in the data structure, namely the Coordinate system, the TextBlock, and the Layout. They provide diﬀerent levels of abstraction for the layout data, and a set of APIs are supported for transformations or operations on these classes.",
    "type": "NarrativeText"
  },
  {
    "element_id": "69e1b61e7e4bb3aa1e17defde33f2436",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 7
    },
    "text": "LayoutParser: A Uniﬁed Toolkit for DL-Based DIA",
    "type": "ListItem"
  },
  {
    "element_id": "000310e2c4536cfd642fb9d8041321d9",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 7
    },
    "text": "Coordinates are the cornerstones for storing layout information. Currently, three types of Coordinate data structures are provided in LayoutParser, shown in Figure 2. Interval and Rectangle are the most common data types and support specifying 1D or 2D regions within a document. They are parameterized with 2 and 4 parameters. A Quadrilateral class is also implemented to support a more generalized representation of rectangular regions when the document is skewed or distorted, where the 4 corner points can be speciﬁed and a total of 8 degrees of freedom are supported. A wide collection of transformations like shift, pad, and scale, and operations like intersect, union, and is_in, are supported for these classes. Notably, it is common to separate a segment of the image and analyze it individually. LayoutParser provides full support for this scenario via image cropping operations crop_image and coordinate transformations like relative_to and condition_on that transform coordinates to and from their relative representations. We refer readers to Table 2 for a more detailed description of these operations13.",
    "type": "NarrativeText"
  },
  {
    "element_id": "95d05ade700411887fdec25c00b09916",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 7
    },
    "text": "Based on Coordinates, we implement the TextBlock class that stores both the positional and extra features of individual layout elements. It also supports specifying the reading orders via setting the parent ﬁeld to the index of the parent object. A Layout class is built that takes in a list of TextBlocks and supports processing the elements in batch. Layout can also be nested to support hierarchical layout structures. They support the same operations and transformations as the Coordinate classes, minimizing both learning and deployment eﬀort.",
    "type": "NarrativeText"
  },
  {
    "element_id": "287483b38071900d6d01a9720f23ff78",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 7
    },
    "text": "3.3 OCR",
    "type": "Title"
  },
  {
    "element_id": "f76cedc4b95d5bc9fcbe5be6662e86cc",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 7
    },
    "text": "LayoutParser provides a uniﬁed interface for existing OCR tools. Though there are many OCR tools available, they are usually conﬁgured diﬀerently with distinct APIs or protocols for using them. It can be ineﬃcient to add new OCR tools into an existing pipeline, and diﬃcult to make direct comparisons among the available tools to ﬁnd the best option for a particular project. To this end, LayoutParser builds a series of wrappers among existing OCR engines, and provides nearly the same syntax for using them. It supports a plug-and-play style of using OCR engines, making it eﬀortless to switch, evaluate, and compare diﬀerent OCR modules:",
    "type": "NarrativeText"
  },
  {
    "element_id": "6e2acc89f9be6589f7f50d01294dd330",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 7
    },
    "text": "1 ocr_agent = lp . TesseractAgent () 2 # Can be easily switched to other OCR software 3 tokens = ocr_agent . detect ( image )",
    "type": "NarrativeText"
  },
  {
    "element_id": "8a671c14cb0bc8292df3114911bbf121",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 7
    },
    "text": "The OCR outputs will also be stored in the aforementioned layout data structures and can be seamlessly incorporated into the digitization pipeline. Currently LayoutParser supports the Tesseract and Google Cloud Vision OCR engines.",
    "type": "NarrativeText"
  },
  {
    "element_id": "83da9364aa34f0ae3caf84c8812f9085",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 7
    },
    "text": "LayoutParser also comes with a DL-based CNN-RNN OCR model [6] trained with the Connectionist Temporal Classiﬁcation (CTC) loss [10]. It can be used like the other OCR modules, and can be easily trained on customized datasets.",
    "type": "NarrativeText"
  },
  {
    "element_id": "05740a64f1e9da4c99e7da7510a7c4f1",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 7
    },
    "text": "13 This is also available in the LayoutParser documentation pages.",
    "type": "NarrativeText"
  },
  {
    "element_id": "285789774a12e30cd85b2a08968f5975",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 8
    },
    "text": "8 Z. Shen et al.",
    "type": "ListItem"
  },
  {
    "element_id": "4036c8f6fd5b6954c0e8a57748ddae35",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 8
    },
    "text": "Table 2: All operations supported by the layout elements. The same APIs are supported across diﬀerent layout element classes including Coordinate types, TextBlock and Layout.",
    "type": "NarrativeText"
  },
  {
    "element_id": "c4201ec961a812449d9964192598bdee",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 8,
      "text_as_html": "<table><thead><th>block.pad(top, bottom,</th><th>right,</th><th>left)</th><th>Enlarge the current block according to the input</th></thead><tr><td>block.scale(fx, fy)</td><td></td><td></td><td>Scale the current block given the ratio in x and y direction</td></tr><tr><td>block.shift(dx, dy)</td><td></td><td></td><td>Move the current block with the shift distances in x and y direction</td></tr><tr><td>block1.is_in(block2)</td><td></td><td></td><td>Whether block] is inside of block2</td></tr><tr><td>block1. intersect (block2)</td><td></td><td></td><td>Return the intersection region of blockl and block2. Coordinate type to be determined based on the inputs</td></tr><tr><td>block1.union(block2)</td><td></td><td></td><td>Return the union region of blockl and block2. Coordinate type to be determined based on the inputs</td></tr><tr><td>block1.relative_to(block2)</td><td></td><td></td><td>Convert the absolute coordinates of block to relative coordinates to block2</td></tr><tr><td>block1.condition_on(block2)</td><td></td><td></td><td>Calculate the absolute coordinates of blockl given the canvas block2’s absolute coordinates</td></tr><tr><td>block. crop_image (image)</td><td></td><td></td><td>Obtain the image segments in the block region</td></tr></table>"
    },
    "text": "Operation Name Description block.pad(top, bottom, right, left) Enlarge the current block according to the input block.scale(fx, fy) Scale the current block given the ratio in x and y direction block.shift(dx, dy) Move the current block with the shift distances in x and y direction block1.is in(block2) Whether block1 is inside of block2 block1.intersect(block2) Return the intersection region of block1 and block2. Coordinate type to be determined based on the inputs. block1.union(block2) Return the union region of block1 and block2. Coordinate type to be determined based on the inputs. block1.relative to(block2) Convert the absolute coordinates of block1 to relative coordinates to block2 block1.condition on(block2) Calculate the absolute coordinates of block1 given the canvas block2’s absolute coordinates block.crop image(image) Obtain the image segments in the block region",
    "type": "Table"
  },
  {
    "element_id": "34cb7787fa7eba8b3f57bb9c27e24457",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 8
    },
    "text": "3.4 Storage and visualization",
    "type": "Title"
  },
  {
    "element_id": "dae91b1c8ec7176c0dfa3b27e6709497",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 8
    },
    "text": "The end goal of DIA is to transform the image-based document data into a structured database. LayoutParser supports exporting layout data into diﬀerent formats like JSON, csv, and will add the support for the METS/ALTO XML format 14 . It can also load datasets from layout analysis-speciﬁc formats like COCO [38] and the Page Format [25] for training layout models (Section 3.5). Visualization of the layout detection results is critical for both presentation and debugging. LayoutParser is built with an integrated API for displaying the layout information along with the original document image. Shown in Figure 3, it enables presenting layout data with rich meta information and features in diﬀerent modes. More detailed information can be found in the online LayoutParser documentation page.",
    "type": "NarrativeText"
  },
  {
    "element_id": "0b8b59dacb9d925333245aa6ec5164a8",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 8
    },
    "text": "3.5 Customized Model Training",
    "type": "Title"
  },
  {
    "element_id": "c778763ecbaef37a2fca62d5b26a1af5",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 8
    },
    "text": "Besides the oﬀ-the-shelf library, LayoutParser is also highly customizable with supports for highly unique and challenging document analysis tasks. Target document images can be vastly diﬀerent from the existing datasets for train- ing layout models, which leads to low layout detection accuracy. Training data",
    "type": "NarrativeText"
  },
  {
    "element_id": "039ef1485e5060541e66bce4bc3d06e2",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 8
    },
    "text": "14 https://altoxml.github.io",
    "type": "NarrativeText"
  },
  {
    "element_id": "c03c6fc9186c4cbbcc4f4475624e117c",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 9
    },
    "text": "LayoutParser: A Uniﬁed Toolkit for DL-Based DIA",
    "type": "ListItem"
  },
  {
    "element_id": "9255dabb82e41e6c9c0d691c94b24d3c",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 9
    },
    "text": "x09 Burpunog uayor Aeydsiq 1 vondo 10g Guypunog usyoy apir:z uondo Mode I: Showing Layout on the Original Image Mode Il: Drawing OCR'd Text at the Correspoding Position",
    "type": "Image"
  },
  {
    "element_id": "d04f239600cdb5f06d89b249d9fc58a5",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 9
    },
    "text": "Fig. 3: Layout detection and OCR results visualization generated by the LayoutParser APIs. Mode I directly overlays the layout region bounding boxes and categories over the original image. Mode II recreates the original document via drawing the OCR’d texts at their corresponding positions on the image canvas. In this ﬁgure, tokens in textual regions are ﬁltered using the API and then displayed.",
    "type": "NarrativeText"
  },
  {
    "element_id": "c0c2625d3ce2ad1206085e2197bb7835",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 9
    },
    "text": "can also be highly sensitive and not sharable publicly. To overcome these chal- lenges, LayoutParser is built with rich features for eﬃcient data annotation and customized model training.",
    "type": "NarrativeText"
  },
  {
    "element_id": "976475020c0c6f673bbd2dd9282125fd",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 9
    },
    "text": "LayoutParser incorporates a toolkit optimized for annotating document lay- outs using object-level active learning [32]. With the help from a layout detection model trained along with labeling, only the most important layout objects within each image, rather than the whole image, are required for labeling. The rest of the regions are automatically annotated with high conﬁdence predictions from the layout detection model. This allows a layout dataset to be created more eﬃciently with only around 60% of the labeling budget.",
    "type": "NarrativeText"
  },
  {
    "element_id": "28ba31fa9d76fdae981edea4ec6f43fb",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 9
    },
    "text": "After the training dataset is curated, LayoutParser supports diﬀerent modes for training the layout models. Fine-tuning can be used for training models on a small newly-labeled dataset by initializing the model with existing pre-trained weights. Training from scratch can be helpful when the source dataset and target are signiﬁcantly diﬀerent and a large training set is available. However, as suggested in Studer et al.’s work[33], loading pre-trained weights on large-scale datasets like ImageNet [5], even from totally diﬀerent domains, can still boost model performance. Through the integrated API provided by LayoutParser, users can easily compare model performances on the benchmark datasets.",
    "type": "NarrativeText"
  },
  {
    "element_id": "675879406b13d1687aa51aa834aeadcf",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 10
    },
    "text": "10 Z. Shen et al.",
    "type": "ListItem"
  },
  {
    "element_id": "491b0c6c5db791879721bd46f1e7688c",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 10
    },
    "text": "Intra-column reading order Token Categories tie (Adress 2) tee (NE sumber Variable Column reading order HEE company type Column Categories (J tite Adress _] ree [7] Section Header Maximum Allowed Height (b) Illustration of the recreated document with dense text structure for better OCR performance",
    "type": "Image"
  },
  {
    "element_id": "0aea553b484b0f71142f4b8968bc0bbd",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 10
    },
    "text": "Fig. 4: Illustration of (a) the original historical Japanese document with layout detection results and (b) a recreated version of the document image that achieves much better character recognition recall. The reorganization algorithm rearranges the tokens based on the their detected bounding boxes given a maximum allowed height.",
    "type": "NarrativeText"
  },
  {
    "element_id": "1bf5f2efb2e74a296fff9fa6910958f6",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 10
    },
    "text": "4 LayoutParser Community Platform",
    "type": "Title"
  },
  {
    "element_id": "cc4eb7f067aa314afdef1417ebcc55ff",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 10
    },
    "text": "Another focus of LayoutParser is promoting the reusability of layout detection models and full digitization pipelines. Similar to many existing deep learning libraries, LayoutParser comes with a community model hub for distributing layout models. End-users can upload their self-trained models to the model hub, and these models can be loaded into a similar interface as the currently available LayoutParser pre-trained models. For example, the model trained on the News Navigator dataset [17] has been incorporated in the model hub.",
    "type": "NarrativeText"
  },
  {
    "element_id": "ca3917dd0e31be642dbb3e4e94aaa7f0",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 10
    },
    "text": "Beyond DL models, LayoutParser also promotes the sharing of entire doc- ument digitization pipelines. For example, sometimes the pipeline requires the combination of multiple DL models to achieve better accuracy. Currently, pipelines are mainly described in academic papers and implementations are often not pub- licly available. To this end, the LayoutParser community platform also enables the sharing of layout pipelines to promote the discussion and reuse of techniques. For each shared pipeline, it has a dedicated project page, with links to the source code, documentation, and an outline of the approaches. A discussion panel is provided for exchanging ideas. Combined with the core LayoutParser library, users can easily build reusable components based on the shared pipelines and apply them to solve their unique problems.",
    "type": "NarrativeText"
  },
  {
    "element_id": "67b148f1ab8ea308f14aa2769cad221b",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 10
    },
    "text": "5 Use Cases",
    "type": "Title"
  },
  {
    "element_id": "baf46e7655fcb8b60575d2f0112cc253",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 10
    },
    "text": "The core objective of LayoutParser is to make it easier to create both large-scale and light-weight document digitization pipelines. Large-scale document processing",
    "type": "NarrativeText"
  },
  {
    "element_id": "6d0c2a25b252b487691f9ef7a6a2d011",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 11
    },
    "text": "LayoutParser: A Uniﬁed Toolkit for DL-Based DIA",
    "type": "ListItem"
  },
  {
    "element_id": "d08aad3bd73dc2689f085b2abf9ac550",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 11
    },
    "text": "focuses on precision, eﬃciency, and robustness. The target documents may have complicated structures, and may require training multiple layout detection models to achieve the optimal accuracy. Light-weight pipelines are built for relatively simple documents, with an emphasis on development ease, speed and ﬂexibility. Ideally one only needs to use existing resources, and model training should be avoided. Through two exemplar projects, we show how practitioners in both academia and industry can easily build such pipelines using LayoutParser and extract high-quality structured document data for their downstream tasks. The source code for these projects will be publicly available in the LayoutParser community hub.",
    "type": "NarrativeText"
  },
  {
    "element_id": "43262ebc8658e18b4dd0442a1f98cdc6",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 11
    },
    "text": "5.1 A Comprehensive Historical Document Digitization Pipeline",
    "type": "Title"
  },
  {
    "element_id": "4759a2f40de57245b1f1ea5d70178489",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 11
    },
    "text": "The digitization of historical documents can unlock valuable data that can shed light on many important social, economic, and historical questions. Yet due to scan noises, page wearing, and the prevalence of complicated layout structures, ob- taining a structured representation of historical document scans is often extremely complicated. In this example, LayoutParser was used to develop a comprehensive pipeline, shown in Figure 5, to gener- ate high-quality structured data from historical Japanese ﬁrm ﬁnancial ta- bles with complicated layouts. The pipeline applies two layout models to identify diﬀerent levels of document structures and two customized OCR engines for optimized character recog- nition accuracy.",
    "type": "NarrativeText"
  },
  {
    "element_id": "d9dd798a5334761e081df2766312ea46",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 11
    },
    "text": "(spe peepee, ‘Active Learning Layout Annotate Layout Dataset | + ‘Annotation Toolkit ¥ a Deep Leaming Layout Model Training & Inference, ¥ ; Handy Data Structures & Post-processing El Apis for Layout Det a LAR ror tye eats) 4 Text Recognition | <—— Default ane Customized ¥ ee Layout Structure Visualization & Export | <—— | visualization & Storage The Japanese Document Helpful LayoutParser Digitization Pipeline Modules",
    "type": "Image"
  },
  {
    "element_id": "92fcb2e748ad04dbcc0135c3e22711eb",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 11
    },
    "text": "As shown in Figure 4 (a), the document contains columns of text written vertically 15, a common style in Japanese. Due to scanning noise and archaic printing technology, the columns can be skewed or have vari- able widths, and hence cannot be eas- ily identiﬁed via rule-based methods. Within each column, words are sepa- rated by white spaces of variable size, and the vertical positions of objects can be an indicator of their layout type.",
    "type": "NarrativeText"
  },
  {
    "element_id": "bcccacca508083422de894c8925c263b",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 11
    },
    "text": "Fig. 5: Illustration of how LayoutParser helps with the historical document digi- tization pipeline.",
    "type": "NarrativeText"
  },
  {
    "element_id": "f34612ade32c4928f65b01cf17543f9b",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 11
    },
    "text": "15 A document page consists of eight rows like this. For simplicity we skip the row segmentation discussion and refer readers to the source code when available.",
    "type": "ListItem"
  },
  {
    "element_id": "7fef3b0217e0c8445e49d698643ae444",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 12
    },
    "text": "12 Z. Shen et al.",
    "type": "Title"
  },
  {
    "element_id": "ea3df291fd7da83dade6d208de3fd628",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 12
    },
    "text": "To decipher the complicated layout",
    "type": "NarrativeText"
  },
  {
    "element_id": "3b385ef50264d0968fe5a3bdfa09899d",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 12
    },
    "text": "structure, two object detection models have been trained to recognize individual columns and tokens, respectively. A small training set (400 images with approxi- mately 100 annotations each) is curated via the active learning based annotation tool [32] in LayoutParser. The models learn to identify both the categories and regions for each token or column via their distinct visual features. The layout data structure enables easy grouping of the tokens within each column, and rearranging columns to achieve the correct reading orders based on the horizontal position. Errors are identiﬁed and rectiﬁed via checking the consistency of the model predictions. Therefore, though trained on a small dataset, the pipeline achieves a high level of layout detection accuracy: it achieves a 96.97 AP [19] score across 5 categories for the column detection model, and a 89.23 AP across 4 categories for the token detection model.",
    "type": "NarrativeText"
  },
  {
    "element_id": "1d9bb6273fb2578509cfc4bde2a71ef4",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 12
    },
    "text": "A combination of character recognition methods is developed to tackle the unique challenges in this document. In our experiments, we found that irregular spacing between the tokens led to a low character recognition recall rate, whereas existing OCR models tend to perform better on densely-arranged texts. To overcome this challenge, we create a document reorganization algorithm that rearranges the text based on the token bounding boxes detected in the layout analysis step. Figure 4 (b) illustrates the generated image of dense text, which is sent to the OCR APIs as a whole to reduce the transaction costs. The ﬂexible coordinate system in LayoutParser is used to transform the OCR results relative to their original positions on the page.",
    "type": "NarrativeText"
  },
  {
    "element_id": "151e06421d637ad7c2906f12ca2903f5",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 12
    },
    "text": "Additionally, it is common for historical documents to use unique fonts with diﬀerent glyphs, which signiﬁcantly degrades the accuracy of OCR models trained on modern texts. In this document, a special ﬂat font is used for printing numbers and could not be detected by oﬀ-the-shelf OCR engines. Using the highly ﬂexible functionalities from LayoutParser, a pipeline approach is constructed that achieves a high recognition accuracy with minimal eﬀort. As the characters have unique visual structures and are usually clustered together, we train the layout model to identify number regions with a dedicated category. Subsequently, LayoutParser crops images within these regions, and identiﬁes characters within them using a self-trained OCR model based on a CNN-RNN [6]. The model detects a total of 15 possible categories, and achieves a 0.98 Jaccard score16 and a 0.17 average Levinstein distances17 for token prediction on the test set.",
    "type": "NarrativeText"
  },
  {
    "element_id": "8050e5c3b2f3b3a5d3ec470481488129",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 12
    },
    "text": "Overall, it is possible to create an intricate and highly accurate digitization pipeline for large-scale digitization using LayoutParser. The pipeline avoids specifying the complicated rules used in traditional methods, is straightforward to develop, and is robust to outliers. The DL models also generate ﬁne-grained results that enable creative approaches like page reorganization for OCR.",
    "type": "NarrativeText"
  },
  {
    "element_id": "498f52aa2bda3afac0fb7b42a965a45a",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 12
    },
    "text": "16 This measures the overlap between the detected and ground-truth characters, and the maximum is 1.",
    "type": "ListItem"
  },
  {
    "element_id": "673caa8cfc8d6fd95c0803b7a899718a",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 12
    },
    "text": "17 This measures the number of edits from the ground-truth text to the predicted text, and lower is better.",
    "type": "ListItem"
  },
  {
    "element_id": "580517975d12d7588690128b3201df55",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 13
    },
    "text": "LayoutParser: A Uniﬁed Toolkit for DL-Based DIA",
    "type": "ListItem"
  },
  {
    "element_id": "91453a0258992632caf19f50530b9f57",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 13
    },
    "text": "(@) Partial table at the bottom (&) Full page table (6) Partial table at the top (d) Mis-detected tet line",
    "type": "Image"
  },
  {
    "element_id": "f77a2c9a76de4acb44d0a4fd5bb533a4",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 13
    },
    "text": "Fig. 6: This lightweight table detector can identify tables (outlined in red) and cells (shaded in blue) in diﬀerent locations on a page. In very few cases (d), it might generate minor error predictions, e.g, failing to capture the top text line of a table.",
    "type": "FigureCaption"
  },
  {
    "element_id": "04bb0c567d9c636378544454e4e67364",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 13
    },
    "text": "5.2 A light-weight Visual Table Extractor",
    "type": "Title"
  },
  {
    "element_id": "e2083f24a55df24e6f77b749455252d1",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 13
    },
    "text": "Detecting tables and parsing their structures (table extraction) are of central im- portance for many document digitization tasks. Many previous works [26, 30, 27] and tools 18 have been developed to identify and parse table structures. Yet they might require training complicated models from scratch, or are only applicable for born-digital PDF documents. In this section, we show how LayoutParser can help build a light-weight accurate visual table extractor for legal docket tables using the existing resources with minimal eﬀort.",
    "type": "NarrativeText"
  },
  {
    "element_id": "56d9625c347d4074aafe1854b7d969eb",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 13
    },
    "text": "The extractor uses a pre-trained layout detection model for identifying the table regions and some simple rules for pairing the rows and the columns in the PDF image. Mask R-CNN [12] trained on the PubLayNet dataset [38] from the LayoutParser Model Zoo can be used for detecting table regions. By ﬁltering out model predictions of low conﬁdence and removing overlapping predictions, LayoutParser can identify the tabular regions on each page, which signiﬁcantly simpliﬁes the subsequent steps. By applying the line detection functions within the tabular segments, provided in the utility module from LayoutParser, the pipeline can identify the three distinct columns in the tables. A row clustering method is then applied via analyzing the y coordinates of token bounding boxes in the left-most column, which are obtained from the OCR engines. A non-maximal suppression algorithm is used to remove duplicated rows with extremely small gaps. Shown in Figure 6, the built pipeline can detect tables at diﬀerent positions on a page accurately. Continued tables from diﬀerent pages are concatenated, and a structured table representation has been easily created.",
    "type": "NarrativeText"
  },
  {
    "element_id": "a2086265f4babc7425e619e405a63287",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 13
    },
    "text": "18 https://github.com/atlanhq/camelot, https://github.com/tabulapdf/tabula",
    "type": "NarrativeText"
  },
  {
    "element_id": "79a9f9a78e1594e44d0f172953954712",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 14
    },
    "text": "14 Z. Shen et al.",
    "type": "ListItem"
  },
  {
    "element_id": "6da6b68966e422fe947ea55600a1daa6",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 14
    },
    "text": "6 Conclusion",
    "type": "Title"
  },
  {
    "element_id": "56c218e9154a1d7beeaa9096a534d3be",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 14
    },
    "text": "LayoutParser provides a comprehensive toolkit for deep learning-based document image analysis. The oﬀ-the-shelf library is easy to install, and can be used to build ﬂexible and accurate pipelines for processing documents with complicated structures. It also supports high-level customization and enables easy labeling and training of DL models on unique document image datasets. The LayoutParser community platform facilitates sharing DL models and DIA pipelines, inviting discussion and promoting code reproducibility and reusability. The LayoutParser team is committed to keeping the library updated continuously and bringing the most recent advances in DL-based DIA, such as multi-modal document modeling [37, 36, 9] (an upcoming priority), to a diverse audience of end-users.",
    "type": "NarrativeText"
  },
  {
    "element_id": "3f0dc5ad486a83dbaf0a69083561c4ba",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 14
    },
    "text": "Acknowledgements We thank the anonymous reviewers for their comments and suggestions. This project is supported in part by NSF Grant OIA-2033558 and funding from the Harvard Data Science Initiative and Harvard Catalyst. Zejiang Shen thanks Doug Downey for suggestions.",
    "type": "NarrativeText"
  },
  {
    "element_id": "e30adbda71c1caf72da35287362ecc7a",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 14
    },
    "text": "References",
    "type": "Title"
  },
  {
    "element_id": "f060876db7e0b32085cec38eace6b64f",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 14
    },
    "text": "[1] Abadi, M., Agarwal, A., Barham, P., Brevdo, E., Chen, Z., Citro, C., Corrado, G.S., Davis, A., Dean, J., Devin, M., Ghemawat, S., Goodfellow, I., Harp, A., Irving, G., Isard, M., Jia, Y., Jozefowicz, R., Kaiser, L., Kudlur, M., Levenberg, J., Man´e, D., Monga, R., Moore, S., Murray, D., Olah, C., Schuster, M., Shlens, J., Steiner, B., Sutskever, I., Talwar, K., Tucker, P., Vanhoucke, V., Vasudevan, V., Vi´egas, F., Vinyals, O., Warden, P., Wattenberg, M., Wicke, M., Yu, Y., Zheng, X.: TensorFlow: Large-scale machine learning on heterogeneous systems (2015), https://www.tensorflow.org/, software available from tensorﬂow.org",
    "type": "ListItem"
  },
  {
    "element_id": "8ecc1df00be23dc41dbdc59f57afa298",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 14
    },
    "text": "[2] Alberti, M., Pondenkandath, V., W¨ursch, M., Ingold, R., Liwicki, M.: Deepdiva: a highly-functional python framework for reproducible experiments. In: 2018 16th International Conference on Frontiers in Handwriting Recognition (ICFHR). pp. 423–428. IEEE (2018)",
    "type": "ListItem"
  },
  {
    "element_id": "cae9565febccbddfcc2c67594e3e0932",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 14
    },
    "text": "[3] Antonacopoulos, A., Bridson, D., Papadopoulos, C., Pletschacher, S.: A realistic dataset for performance evaluation of document layout analysis. In: 2009 10th International Conference on Document Analysis and Recognition. pp. 296–300. IEEE (2009)",
    "type": "ListItem"
  },
  {
    "element_id": "7249686d2a780e5342fd87ad2c0943ab",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 14
    },
    "text": "[4] Baek, Y., Lee, B., Han, D., Yun, S., Lee, H.: Character region awareness for text detection. In: Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition. pp. 9365–9374 (2019)",
    "type": "ListItem"
  },
  {
    "element_id": "44b0f7815dd981f676ac646eb64ebaed",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 14
    },
    "text": "[5] Deng, J., Dong, W., Socher, R., Li, L.J., Li, K., Fei-Fei, L.: ImageNet: A Large-Scale Hierarchical Image Database. In: CVPR09 (2009)",
    "type": "ListItem"
  },
  {
    "element_id": "891d98b376fbcecb49c0f1d75279b969",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 14
    },
    "text": "[6] Deng, Y., Kanervisto, A., Ling, J., Rush, A.M.: Image-to-markup generation with coarse-to-ﬁne attention. In: International Conference on Machine Learning. pp. 980–989. PMLR (2017)",
    "type": "ListItem"
  },
  {
    "element_id": "cd8df9519c6d9b4e8821af1f779aed97",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 14
    },
    "text": "[7] Ganin, Y., Lempitsky, V.: Unsupervised domain adaptation by backpropagation. In: International conference on machine learning. pp. 1180–1189. PMLR (2015)",
    "type": "ListItem"
  },
  {
    "element_id": "9af31ff3ce3c23eb6a793e03d224e8c6",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 15
    },
    "text": "LayoutParser: A Uniﬁed Toolkit for DL-Based DIA",
    "type": "ListItem"
  },
  {
    "element_id": "496a9cd773b284cc90f44342df4daaf8",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 15
    },
    "text": "Gardner, M., Grus, J., Neumann, M., Tafjord, O., Dasigi, P., Liu, N., Peters, M., Schmitz, M., Zettlemoyer, L.: Allennlp: A deep semantic natural language processing platform. arXiv preprint arXiv:1803.07640 (2018) Lukasz Garncarek, Powalski, R., Stanistawek, T., Topolski, B., Halama, P., Graliriski, F.: Lambert: Layout-aware (language) modeling using bert for in- formation extraction (2020)",
    "type": "NarrativeText"
  },
  {
    "element_id": "b9259ff32960ce26cd45daea72f074bf",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 15
    },
    "text": "[10] Graves, A., Fern´andez, S., Gomez, F., Schmidhuber, J.: Connectionist temporal classiﬁcation: labelling unsegmented sequence data with recurrent neural networks. In: Proceedings of the 23rd international conference on Machine learning. pp. 369–376 (2006)",
    "type": "ListItem"
  },
  {
    "element_id": "2eace12f87a45bda3ac049a1861134f6",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 15
    },
    "text": "[11] Harley, A.W., Ufkes, A., Derpanis, K.G.: Evaluation of deep convolutional nets for document image classiﬁcation and retrieval. In: 2015 13th International Conference on Document Analysis and Recognition (ICDAR). pp. 991–995. IEEE (2015) [12] He, K., Gkioxari, G., Doll´ar, P., Girshick, R.: Mask r-cnn. In: Proceedings of the",
    "type": "NarrativeText"
  },
  {
    "element_id": "b1886fc4c669693dd70152ab1e656e9e",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 15
    },
    "text": "IEEE international conference on computer vision. pp. 2961–2969 (2017)",
    "type": "ListItem"
  },
  {
    "element_id": "7805c51348da2eea644764c91f30d86b",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 15
    },
    "text": "[13] He, K., Zhang, X., Ren, S., Sun, J.: Deep residual learning for image recognition. In: Proceedings of the IEEE conference on computer vision and pattern recognition. pp. 770–778 (2016)",
    "type": "ListItem"
  },
  {
    "element_id": "9acadb56f1f6fdd944b5b3c2843e712a",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 15
    },
    "text": "[14] Kay, A.: Tesseract: An open-source optical character recognition engine. Linux J. 2007(159), 2 (Jul 2007)",
    "type": "ListItem"
  },
  {
    "element_id": "6b676db7ad20c1462c6a2b50d99fe669",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 15
    },
    "text": "[15] Lamiroy, B., Lopresti, D.: An open architecture for end-to-end document analysis benchmarking. In: 2011 International Conference on Document Analysis and Recognition. pp. 42–47. IEEE (2011)",
    "type": "ListItem"
  },
  {
    "element_id": "353606e52e2ce3b2d0ba22fe8f039ddc",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 15
    },
    "text": "[16] Lee, B.C., Weld, D.S.: Newspaper navigator: Open faceted search for 1.5 million images. In: Adjunct Publication of the 33rd Annual ACM Sym- posium on User Interface Software and Technology. p. 120–122. UIST ’20 Adjunct, Association for Computing Machinery, New York, NY, USA (2020). https://doi.org/10.1145/3379350.3416143, https://doi-org.offcampus. lib.washington.edu/10.1145/3379350.3416143",
    "type": "ListItem"
  },
  {
    "element_id": "4064435d98d2ee1a1acd2e31d41c7adf",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 15
    },
    "text": "[17] Lee, B.C.G., Mears, J., Jakeway, E., Ferriter, M., Adams, C., Yarasavage, N., Thomas, D., Zwaard, K., Weld, D.S.: The Newspaper Navigator Dataset: Extracting Headlines and Visual Content from 16 Million Historic Newspaper Pages in Chronicling America, p. 3055–3062. Association for Computing Machinery, New York, NY, USA (2020), https://doi.org/10.1145/3340531.3412767",
    "type": "ListItem"
  },
  {
    "element_id": "b6b6bebc5b54732ba5cd361ed9881c80",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 15
    },
    "text": "[18] Li, M., Cui, L., Huang, S., Wei, F., Zhou, M., Li, Z.: Tablebank: Table benchmark for image-based table detection and recognition. arXiv preprint arXiv:1903.01949 (2019)",
    "type": "ListItem"
  },
  {
    "element_id": "3f951acc4bf619db7ded8f1c32d035fb",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 15
    },
    "text": "[19] Lin, T.Y., Maire, M., Belongie, S., Hays, J., Perona, P., Ramanan, D., Doll´ar, P., Zitnick, C.L.: Microsoft coco: Common objects in context. In: European conference on computer vision. pp. 740–755. Springer (2014)",
    "type": "ListItem"
  },
  {
    "element_id": "6a704f3a76e0b55203fe3e9bdca57fdf",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 15
    },
    "text": "[20] Long, J., Shelhamer, E., Darrell, T.: Fully convolutional networks for semantic segmentation. In: Proceedings of the IEEE conference on computer vision and pattern recognition. pp. 3431–3440 (2015)",
    "type": "ListItem"
  },
  {
    "element_id": "944334645324a81a0f0dfd690ec415ad",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 15
    },
    "text": "[21] Neudecker, C., Schlarb, S., Dogan, Z.M., Missier, P., Suﬁ, S., Williams, A., Wolsten- croft, K.: An experimental workﬂow development platform for historical document digitisation and analysis. In: Proceedings of the 2011 workshop on historical document imaging and processing. pp. 161–168 (2011)",
    "type": "ListItem"
  },
  {
    "element_id": "d7ad7dbd638254eedd7e56d2ff51a08a",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 15
    },
    "text": "[22] Oliveira, S.A., Seguin, B., Kaplan, F.: dhsegment: A generic deep-learning approach for document segmentation. In: 2018 16th International Conference on Frontiers in Handwriting Recognition (ICFHR). pp. 7–12. IEEE (2018)",
    "type": "ListItem"
  },
  {
    "element_id": "5809f49ba1335537b24644b3d8901eaa",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 16
    },
    "text": "16 Z. Shen et al.",
    "type": "ListItem"
  },
  {
    "element_id": "e0c6a602712db2d3a5aca12c2bfd2643",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 16
    },
    "text": "[23] Paszke, A., Gross, S., Chintala, S., Chanan, G., Yang, E., DeVito, Z., Lin, Z., Desmaison, A., Antiga, L., Lerer, A.: Automatic diﬀerentiation in pytorch (2017) [24] Paszke, A., Gross, S., Massa, F., Lerer, A., Bradbury, J., Chanan, G., Killeen, T., Lin, Z., Gimelshein, N., Antiga, L., et al.: Pytorch: An imperative style, high-performance deep learning library. arXiv preprint arXiv:1912.01703 (2019) [25] Pletschacher, S., Antonacopoulos, A.: The page (page analysis and ground-truth elements) format framework. In: 2010 20th International Conference on Pattern Recognition. pp. 257–260. IEEE (2010)",
    "type": "NarrativeText"
  },
  {
    "element_id": "dfd37e96fa4ce61cdc6435a4ea892ab4",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 16
    },
    "text": "[26] Prasad, D., Gadpal, A., Kapadni, K., Visave, M., Sultanpure, K.: Cascadetabnet: An approach for end to end table detection and structure recognition from image- based documents. In: Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition Workshops. pp. 572–573 (2020)",
    "type": "ListItem"
  },
  {
    "element_id": "fe097da0cba3c6f96b57c975f0d93207",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 16
    },
    "text": "[27] Qasim, S.R., Mahmood, H., Shafait, F.: Rethinking table recognition using graph neural networks. In: 2019 International Conference on Document Analysis and Recognition (ICDAR). pp. 142–147. IEEE (2019)",
    "type": "ListItem"
  },
  {
    "element_id": "3506e0d0923e11463cfcbfb4d6b7fda9",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 16
    },
    "text": "[28] Ren, S., He, K., Girshick, R., Sun, J.: Faster r-cnn: Towards real-time object detection with region proposal networks. In: Advances in neural information processing systems. pp. 91–99 (2015)",
    "type": "ListItem"
  },
  {
    "element_id": "8b84cf0fa69736b331250b62e8699c15",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 16
    },
    "text": "[29] Scarselli, F., Gori, M., Tsoi, A.C., Hagenbuchner, M., Monfardini, G.: The graph neural network model. IEEE transactions on neural networks 20(1), 61–80 (2008) [30] Schreiber, S., Agne, S., Wolf, I., Dengel, A., Ahmed, S.: Deepdesrt: Deep learning for detection and structure recognition of tables in document images. In: 2017 14th IAPR international conference on document analysis and recognition (ICDAR). vol. 1, pp. 1162–1167. IEEE (2017)",
    "type": "NarrativeText"
  },
  {
    "element_id": "ce95ea5e2f1d878958c42464b01dd2f5",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 16
    },
    "text": "[31] Shen, Z., Zhang, K., Dell, M.: A large dataset of historical japanese documents with complex layouts. In: Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition Workshops. pp. 548–549 (2020)",
    "type": "ListItem"
  },
  {
    "element_id": "8b50d7595abeea7b1f9178aef7bfaa59",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 16
    },
    "text": "[32] Shen, Z., Zhao, J., Dell, M., Yu, Y., Li, W.: Olala: Object-level active learning based layout annotation. arXiv preprint arXiv:2010.01762 (2020)",
    "type": "ListItem"
  },
  {
    "element_id": "58e0002b0d4e9ccb1e0a35fd70fbf692",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 16
    },
    "text": "[33] Studer, L., Alberti, M., Pondenkandath, V., Goktepe, P., Kolonko, T., Fischer, A., Liwicki, M., Ingold, R.: A comprehensive study of imagenet pre-training for historical document image analysis. In: 2019 International Conference on Document Analysis and Recognition (ICDAR). pp. 720–725. IEEE (2019)",
    "type": "ListItem"
  },
  {
    "element_id": "fddffc2da9f93b5b43368328a25d9b69",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 16
    },
    "text": "[34] Wolf, T., Debut, L., Sanh, V., Chaumond, J., Delangue, C., Moi, A., Cistac, P., Rault, T., Louf, R., Funtowicz, M., et al.: Huggingface’s transformers: State-of- the-art natural language processing. arXiv preprint arXiv:1910.03771 (2019) [35] Wu, Y., Kirillov, A., Massa, F., Lo, W.Y., Girshick, R.: Detectron2. https://",
    "type": "NarrativeText"
  },
  {
    "element_id": "f2651da696e685acda917d398da29ef8",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 16
    },
    "text": "github.com/facebookresearch/detectron2 (2019)",
    "type": "ListItem"
  },
  {
    "element_id": "8ece5088c5abf15d4c02993baceb7432",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 16
    },
    "text": "[36] Xu, Y., Xu, Y., Lv, T., Cui, L., Wei, F., Wang, G., Lu, Y., Florencio, D., Zhang, C., Che, W., et al.: Layoutlmv2: Multi-modal pre-training for visually-rich document understanding. arXiv preprint arXiv:2012.14740 (2020)",
    "type": "ListItem"
  },
  {
    "element_id": "077632ab058a46c0ea4e88f24006f74f",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 16
    },
    "text": "[37] Xu, Y., Li, M., Cui, L., Huang, S., Wei, F., Zhou, M.: Layoutlm: Pre-training of text and layout for document image understanding (2019)",
    "type": "ListItem"
  },
  {
    "element_id": "e0cc320bd1381e13d4c80cd22fe4b856",
    "metadata": {
      "data_source": {
        "permissions_data": [
          {
            "mode": 33188
          }
        ],
        "url": "/home/runner/work/unstructured/unstructured/test_unstructured_ingest/example-docs/layout-parser-paper.pdf"
      },
      "filetype": "application/pdf",
      "languages": [
        "eng"
      ],
      "page_number": 16
    },
    "text": "[38] Zhong, X., Tang, J., Yepes, A.J.: Publaynet: largest dataset ever for doc- In: 2019 International Conference on Document IEEE (Sep 2019). ument Analysis and Recognition (ICDAR). pp. 1015–1022. https://doi.org/10.1109/ICDAR.2019.00166 layout analysis.",
    "type": "ListItem"
  }
]